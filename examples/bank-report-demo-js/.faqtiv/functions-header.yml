signatures:
  add-table-header: >-
    addTableHeader(workSheet:object, row:number, col:number,
    columnNames:string[]) : void - Applies header styling and sets column names
    in the specified worksheet row and columns. Modifies the worksheet directly
    without returning any value.
  add-table-rows: >-
    addTableRows(workSheet:object, startRow:number, startCol:number,
    rows:Array<Array<any>>, formats?:string[]) : void - Adds rows of data
    starting from a specified row and column in the given worksheet. Each row is
    represented by an array of cell values, and optional formats can be applied
    to cells. Modifies the worksheet directly without returning any value.
  add-worksheet: >-
    addWorksheet(workbook:object, sheetName:string) : object - Adds a new
    worksheet to the given workbook with the specified sheet name and returns
    the created worksheet object, which contains methods and properties for
    modifying the worksheet.
  auto-size-column-width: >-
    autoSizeColumnWidth(worksheet:object) : void - Adjusts the width of each
    column in the given worksheet to fit the longest cell value by calculating
    the maximum string length of values in each column. Modifies the worksheet
    directly without returning any value.
  create-workbook: >-
    createWorkbook() : object - Creates and returns a new ExcelJS Workbook
    instance, which provides methods and properties for creating and managing
    worksheets, styles, and other Excel file operations.
  get-bank-branches: >-
    getBankBranches(bankId:string) : Array<{id:string, address:string,
    city:string, county:string, state:string, zip:string}> - Fetches branch data
    for a given bank ID from the FDIC API and returns an array of branch
    objects, each containing the properties: id, address, city, county, state,
    and zip.
  get-bank-financials: >-
    getBankFinancials(bankId:string) : Array<{report_date:string,
    total_deposits:number}> - Retrieves financial data for a specific bank ID
    from the FDIC API and returns an array of objects, each containing the
    report_date in YYYY-MM-DD format and total_deposits in dollars.
  get-bank-id-by-name: >-
    getBankIdByName(name: string) : Promise<string> - Queries the FDIC API to
    retrieve the ID of the first active bank matching the provided name. Returns
    a promise that resolves to a string representing the bank's ID. Responds
    with event logs and raw data about the number of matching banks.
embedding: >-
  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
