signatures:
  bank_api_fns: >-
    get_bank_branches(bank_id: str) : list[dict{'id': str, 'address': str,
    'city': str, 'county': str, 'state': str, 'zip': str}] - Retrieves a list of
    branches for a given bank ID, with details including id, address, city,
    county, state, and zip code.


    get_bank_financials(bank_id: str) : list[dict{'report_date': str,
    'total_deposits': int}] - Retrieves the financial data of a bank identified
    by its ID, including report dates and total deposits (in thousands).


    get_bank_id_by_name(name: str) : str - Retrieves the unique bank ID
    corresponding to the given bank name.
  workbook_fns: >-
    create_workbook() : openpyxl.Workbook - Creates and returns a new Excel
    workbook using the openpyxl library.


    auto_size_column_width(worksheet: openpyxl.worksheet.worksheet.Worksheet) :
    None - Automatically adjusts column widths in the given worksheet based on
    the content length of each cell.


    add_worksheet(workbook: openpyxl.Workbook, sheet_name: str) :
    openpyxl.worksheet.worksheet.Worksheet - Adds a new worksheet to the given
    workbook with the specified name. Returns the created worksheet.


    add_table_rows(worksheet: openpyxl.worksheet.worksheet.Worksheet, start_row:
    int, start_col: int, rows: list[list], formats: list[str] = None) : None -
    Adds multiple rows of data to the specified worksheet starting at the given
    row and column. Formats can optionally be applied to columns based on
    provided format strings.


    add_table_header(worksheet: openpyxl.worksheet.worksheet.Worksheet, row:
    int, col: int, column_names: list[str]) : None - Adds a header row at the
    specified position in the worksheet. Applies bold font, center alignment,
    and borders to each header cell.
embedding: >-
  
