signatures:
  get_bank_branches: >-
    get_bank_branches(bank_id: str) : List[Dict[str, Union[str, int]]] -
    Retrieves branches of a bank given its bank ID, returning a list of
    dictionaries. Each dictionary contains 'id' (branch ID), 'address', 'city',
    'county', 'state', and 'zip' (postal code).
  get_bank_financials: >-
    get_bank_financials(bank_id: str) : List[Dict[str, Union[str, int]]] -
    Retrieves financial information for a bank given its bank ID, returning a
    list of dictionaries. Each dictionary contains 'report_date' (formatted as
    YYYY-MM-DD) and 'total_deposits' (in thousands) for different reporting
    dates.
  get_bank_id_by_name: >-
    get_bank_id_by_name(name: str) : str - Retrieves the bank ID for an active
    bank based on the provided bank name. Returns the ID as a string.
  create_workbook: >-
    create_workbook() : openpyxl.Workbook - Creates and returns a new instance
    of an openpyxl Workbook object, allowing for Excel file manipulation and
    data insertion.
  auto_size_column_width: >-
    auto_size_column_width(worksheet: openpyxl.worksheet.worksheet.Worksheet) :
    None - Adjusts each column width in the given worksheet to fit the longest
    non-empty cell value within that column, enhancing the readability of data.
  add_worksheet: >-
    add_worksheet(workbook: openpyxl.Workbook, sheet_name: str) :
    openpyxl.worksheet.worksheet.Worksheet - Adds a new worksheet to the
    specified workbook with the given sheet name and returns the created
    worksheet object.
  add_table_rows: >-
    add_table_rows(worksheet: openpyxl.worksheet.worksheet.Worksheet, start_row:
    int, start_col: int, rows: List[List[Any]], formats: Optional[List[str]] =
    None) : None - Inserts data into the worksheet starting from the specified
    row and column. Each list in 'rows' represents a row of cell values.
    Optional 'formats' parameter can specify number formats for each column.
  add_table_header: >-
    add_table_header(worksheet: openpyxl.worksheet.worksheet.Worksheet, row:
    int, col: int, column_names: List[str]) : None - Adds a header row to the
    worksheet at the specified starting row and column, applying bold font,
    center alignment, and thin borders to each cell. Each entry in
    'column_names' represents a header title.
embedding: >-
  
