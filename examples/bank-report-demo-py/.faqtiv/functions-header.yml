signatures:
  bank_api_fns: >-
    get_bank_branches(bank_id: int) : list[dict[str, str]] - Retrieves
    information about branches for a given bank, returning a list of
    dictionaries containing branch details including id, address, city, county,
    state, and zip code.


    get_bank_financials(bank_id: int) : list[dict[str, Union[str, int]]] -
    Fetches the financial data for a bank by ID, returning a list of
    dictionaries containing report_date (YYYY-MM-DD) and total_deposits
    (multiplied by 1000).


    get_bank_id_by_name(name: str) : int - Retrieves the unique bank ID by
    searching for the bank's name, returning the ID as an integer.
  workbook_fns: >-
    create_workbook() : openpyxl.Workbook - Creates and returns a new Excel
    workbook using the openpyxl library.


    auto_size_column_width(worksheet: openpyxl.worksheet.worksheet.Worksheet) :
    None - Automatically adjusts column widths in the given worksheet based on
    the content length of each cell.


    add_worksheet(workbook: openpyxl.Workbook, sheet_name: str) :
    openpyxl.worksheet.worksheet.Worksheet - Adds a new worksheet to the given
    workbook with the specified name. Returns the created worksheet.


    add_table_rows(worksheet: openpyxl.worksheet.worksheet.Worksheet, start_row:
    int, start_col: int, rows: list[list], formats: list[str] = None) : None -
    Adds multiple rows of data to the specified worksheet starting at the given
    row and column. Formats can optionally be applied to columns based on
    provided format strings.


    add_table_header(worksheet: openpyxl.worksheet.worksheet.Worksheet, row:
    int, col: int, column_names: list[str]) : None - Adds a header row at the
    specified position in the worksheet. Applies bold font, center alignment,
    and borders to each header cell.
embedding: >-
  
