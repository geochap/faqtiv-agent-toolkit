signatures:
  bank_api_fns: >-
    get_bank_branches(bank_id: str) : list[dict[id: str, address: str, city:
    str, county: str, state: str, zip: str]] - Retrieves a list of all branches
    for a given bank ID and returns their details including ID, address, city,
    county, state, and ZIP code.


    get_bank_financials(bank_id: str) : list[dict[report_date: str,
    total_deposits: int]] - Retrieves the financial data of a bank identified by
    bank ID, returning a list of objects with the reporting date (YYYY-MM-DD)
    and the total deposits (as an integer in dollars).


    get_bank_id_by_name(name: str) : str - Searches for a bank by its name and
    returns its bank ID as a string.
  workbook_fns: >-
    create_workbook() : openpyxl.Workbook - Creates and returns a new Excel
    workbook using the openpyxl library.


    auto_size_column_width(worksheet: openpyxl.worksheet.worksheet.Worksheet) :
    None - Automatically adjusts column widths in the given worksheet based on
    the content length of each cell.


    add_worksheet(workbook: openpyxl.Workbook, sheet_name: str) :
    openpyxl.worksheet.worksheet.Worksheet - Adds a new worksheet to the given
    workbook with the specified name. Returns the created worksheet.


    add_table_rows(worksheet: openpyxl.worksheet.worksheet.Worksheet, start_row:
    int, start_col: int, rows: list[list], formats: list[str] = None) : None -
    Adds multiple rows of data to the specified worksheet starting at the given
    row and column. Formats can optionally be applied to columns based on
    provided format strings.


    add_table_header(worksheet: openpyxl.worksheet.worksheet.Worksheet, row:
    int, col: int, column_names: list[str]) : None - Adds a header row at the
    specified position in the worksheet. Applies bold font, center alignment,
    and borders to each header cell.
embedding: >-
  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
