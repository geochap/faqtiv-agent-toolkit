signatures:
  addFunction: >-
    addFunction(agentDirectoryPath: string, functionName: string, functionCode:
    string) : Promise<void> - Asynchronously executes a shell command to add a
    new function to the faqtiv agent by constructing a command with the provided
    agent directory path, function name, and escaped function code. Returns a
    Promise that resolves when the command execution is complete or throws an
    error if the execution fails.
  addModule: >-
    addModule(agentDirectoryPath: string, moduleName: string, alias?: string,
    version?: string) : Promise<void> - Asynchronously adds a new module to the
    faqtiv agent by executing a shell command built with the provided agent
    directory path, module name, and optionally alias and version. Returns a
    Promise that resolves upon successful execution or throws an error if the
    operation fails.
  addTask: >-
    addTask(agentDirectoryPath: string, taskName: string, description: string) :
    Promise<void> - Asynchronously adds a new task to the faqtiv agent by
    executing a shell command formed with the provided agent directory path,
    task name, and an escaped task description for shell safety. Returns a
    Promise that resolves when the task has been successfully added or throws an
    error if the operation fails.
  compileTask: >-
    compileTask(agentDirectoryPath: string, taskName: string) : Promise<void> -
    Asynchronously compiles a specified task in the faqtiv agent by executing a
    shell command built with the given agent directory path and task name.
    Returns a Promise that resolves when the task compilation succeeds or throws
    an error if it fails.
  fixTask: >-
    fixTask(agentDirectoryPath: string, taskName: string, feedback: string) :
    Promise<void> - Asynchronously fixes a specified task in the faqtiv agent by
    executing a shell command using the provided agent directory path, task
    name, and an escaped feedback message for shell safety. Returns a Promise
    that resolves once the task has been successfully fixed or throws an error
    if the process fails.
  getInstructions: >-
    getInstructions(agentDirectoryPath: string) : Promise<string> -
    Asynchronously retrieves and returns the instructions for the faqtiv agent
    by executing a shell command using the provided agent directory path.
    Returns a Promise that resolves to a string containing the agent
    instructions or throws an error if the retrieval process fails.
  initializeAgent: >-
    initializeAgent(agentDirectoryPath: string, runtime?: string) :
    Promise<void> - Asynchronously initializes a new faqtiv agent in the
    specified directory using a shell command with the provided agent directory
    path and an optional runtime, defaulting to 'javascript'. Returns a Promise
    that resolves once the agent is successfully initialized or throws an error
    if the process fails.
  listFunctions: >-
    listFunctions(agentDirectoryPath: string) : Promise<{functions: Array<{name:
    string, parameters: Array<string>, returnType: string}>}> - Asynchronously
    retrieves a list of all functions in the faqtiv agent by executing a shell
    command utilizing the provided agent directory path. Returns a Promise that
    resolves to an object containing an array of function objects, each with
    properties: 'name' (string), 'parameters' (array of strings), and
    'returnType' (string), or throws an error if the listing process fails.
  listTasks: >-
    listTasks(agentDirectoryPath: string) : Promise<string> - Asynchronously
    lists all tasks in the faqtiv agent by executing a shell command using the
    provided agent directory path. Returns a Promise that resolves to a string
    containing the list of tasks formatted in a plain text representation or
    throws an error if the task listing process fails.
  migrateTasks: >-
    migrateTasks(agentDirectoryPath: string, dry?: boolean) : Promise<string> -
    Asynchronously migrates tasks in the faqtiv agent by executing a shell
    command using the provided agent directory path. An optional dry run can be
    performed without making actual changes if 'dry' is set to true. Returns a
    Promise that resolves to a string detailing the migration process or
    results, or throws an error if the migration fails.
  parseYamlApiSpec: >-
    parseYamlApiSpec(apiUrl: string) : Promise.<object> - Fetches and parses a
    YAML API specification from the provided URL. Returns a promise resolving to
    an object containing the parsed API specification details, including all
    properties such as endpoints, methods, parameters, and responses.
  removeFunction: >-
    removeFunction(agentDirectoryPath: string, functionName: string) :
    Promise<void> - Asynchronously removes a specified function from the faqtiv
    agent by executing a shell command using the provided agent directory path
    and function name. Returns a Promise that resolves once the function is
    successfully removed or throws an error if the deletion process fails.
  removeTask: >-
    removeTask(agentDirectoryPath: string, taskName: string) : Promise<void> -
    Asynchronously removes a specified task from the faqtiv agent by executing a
    shell command using the provided agent directory path and task name. Returns
    a Promise that resolves once the task is successfully removed or throws an
    error if the removal process fails.
  runAdhocTask: >-
    runAdhocTask(agentDirectoryPath: string, description: string): Promise<void>
    - Executes an ad-hoc task by running a command in the agent's directory.
    Returns a promise that resolves when the task is completed, or rejects if an
    error occurs during execution.
  runTask: >-
    runTask(agentDirectoryPath: string, taskName: string, packedArgs?: string) :
    Promise<string> - Asynchronously runs a specified task in the faqtiv agent
    by executing a shell command using the provided agent directory path, task
    name, and optionally packed arguments. These arguments are split and escaped
    for shell safety if provided. Returns a Promise that resolves to a string
    containing the output of the task execution or throws an error if the
    execution fails.
  setEnvVar: >-
    setEnvVar(agentDirectoryPath: string, key: string, value: string) :
    Promise<void> - Asynchronously sets an environment variable for the faqtiv
    agent by executing a shell command using the provided agent directory path,
    key, and an escaped value for shell safety. Returns a Promise that resolves
    when the environment variable is successfully set or throws an error if the
    operation fails.
  showInstructions: >-
    showInstructions(agentDirectoryPath: string) : Promise<string> -
    Asynchronously retrieves and returns the instructions for the faqtiv agent
    by executing a shell command using the provided agent directory path.
    Returns a Promise that resolves to a string containing the detailed
    instructions or throws an error if the retrieval process fails.
  showProjectConfig: >-
    showProjectConfig(agentDirectoryPath: string) : Promise<{config:
    Record<string, any>}> - Asynchronously retrieves and returns the project
    configuration for the faqtiv agent in JSON format by executing a shell
    command using the provided agent directory path. Returns a Promise that
    resolves to an object containing the configuration details as key-value
    pairs or throws an error if the operation fails.
  showTask: >-
    showTask(agentDirectoryPath: string, taskName: string) : Promise<string> -
    Asynchronously retrieves and returns the details of a specific task in the
    faqtiv agent by executing a shell command using the provided agent directory
    path and task name. Returns a Promise that resolves to a string containing
    the task's detailed information or throws an error if the retrieval process
    fails.
  updateDocHeaders: >-
    updateDocHeaders(agentDirectoryPath: string) : Promise<void> -
    Asynchronously updates the documentation headers in the faqtiv agent by
    executing a shell command using the provided agent directory path. Returns a
    Promise that resolves once the headers are successfully updated or throws an
    error if the process fails.
  updateFunction: >-
    updateFunction(agentDirectoryPath: string, functionName: string, newCode:
    string) : Promise<void> - Asynchronously updates an existing function in the
    faqtiv agent by executing a shell command with the provided agent directory
    path, function name, and the escaped new code to ensure shell safety.
    Returns a Promise that resolves once the function is successfully updated or
    throws an error if the update process fails.
  updateHeaders: >-
    updateHeaders(agentDirectoryPath: string) : Promise<void> - Asynchronously
    updates various headers in the faqtiv agent by executing a shell command
    using the provided agent directory path. Returns a Promise that resolves
    once the headers are successfully updated or throws an error if the update
    process fails.
  updateInstructions: >-
    updateInstructions(agentDirectoryPath: string, newInstructions: string) :
    Promise<void> - Asynchronously updates the instructions for the faqtiv agent
    by executing a shell command using the provided agent directory path and the
    escaped new instructions to ensure shell safety. Returns a Promise that
    resolves once the instructions are successfully updated or throws an error
    if the update process fails.
  updateTask: >-
    updateTask(agentDirectoryPath: string, taskName: string, taskDescription:
    string) : Promise<void> - Asynchronously updates a specified task in the
    faqtiv agent by executing a shell command using the provided agent directory
    path, task name, and an escaped task description for shell safety. Returns a
    Promise that resolves when the task is successfully updated or throws an
    error if the update process fails.
  listDocuments: >-
    listDocuments(agentDirectoryPath: string) : Promise<{documents: Array<{name:
    string, size: number, createdAt: string}>}> - Asynchronously retrieves a
    list of all documents in the faqtiv agent by executing a shell command using
    the provided agent directory path. Returns a Promise that resolves to an
    object containing an array of document objects, each with properties: 'name'
    (string), 'size' (number), and 'createdAt' (string), or throws an error if
    the listing process fails.
  showDocument: >-
    showDocument(agentDirectoryPath: string, documentName: string) :
    Promise<string> - Asynchronously retrieves and returns the contents of a
    specified document in the faqtiv agent by executing a shell command using
    the provided agent directory path and document name. Returns a Promise that
    resolves to a string containing the document's content or throws an error if
    the operation fails.
  addDocument: >-
    addDocument(agentDirectoryPath: string, name: string, content: string) :
    Promise<void> - Escapes the document content for shell safety, builds a
    command with document details, and executes it to add the document to the
    specified agent directory asynchronously, returning a promise that resolves
    when the operation completes without any result value.
embedding: >-
  
